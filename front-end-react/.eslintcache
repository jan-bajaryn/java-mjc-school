[{"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\reportWebVitals.ts":"1","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\App.tsx":"2","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\index.tsx":"3","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\Header.tsx":"4","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\MainPage.tsx":"5","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\LoginPage.tsx":"6","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\RegisterPage.tsx":"7","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\entity\\Certificate.ts":"8","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\admin\\CertificatesAdminPage.tsx":"9","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\Interceptors.js":"10","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\Pagination.tsx":"11","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\AuthorizationHandleService.ts":"12","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\LocalStorageHelper.ts":"13","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\Footer.tsx":"14","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\user\\BasketPage.tsx":"15","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\CouponComp.tsx":"16","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\RefExtractor.tsx":"17","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\user\\UserOrdersPage.tsx":"18","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\entity\\Order.ts":"19","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\entity\\Purchase.ts":"20","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\Parser.ts":"21"},{"size":425,"mtime":1609872681043,"results":"22","hashOfConfig":"23"},{"size":1389,"mtime":1610891807740,"results":"24","hashOfConfig":"23"},{"size":500,"mtime":1609872681043,"results":"25","hashOfConfig":"23"},{"size":4386,"mtime":1610880658762,"results":"26","hashOfConfig":"23"},{"size":13406,"mtime":1610920107119,"results":"27","hashOfConfig":"23"},{"size":6220,"mtime":1610622257202,"results":"28","hashOfConfig":"23"},{"size":8945,"mtime":1610972587332,"results":"29","hashOfConfig":"23"},{"size":2274,"mtime":1610544049113,"results":"30","hashOfConfig":"23"},{"size":29813,"mtime":1611156654692,"results":"31","hashOfConfig":"23"},{"size":484,"mtime":1610464990526,"results":"32","hashOfConfig":"23"},{"size":5449,"mtime":1610573643281,"results":"33","hashOfConfig":"23"},{"size":2006,"mtime":1610622257194,"results":"34","hashOfConfig":"23"},{"size":2376,"mtime":1610893901210,"results":"35","hashOfConfig":"23"},{"size":339,"mtime":1610639064811,"results":"36","hashOfConfig":"23"},{"size":7218,"mtime":1610897276074,"results":"37","hashOfConfig":"23"},{"size":2673,"mtime":1610845470462,"results":"38","hashOfConfig":"23"},{"size":239,"mtime":1610621365607,"results":"39","hashOfConfig":"23"},{"size":7534,"mtime":1610914416012,"results":"40","hashOfConfig":"23"},{"size":766,"mtime":1610896017802,"results":"41","hashOfConfig":"23"},{"size":745,"mtime":1610896017783,"results":"42","hashOfConfig":"23"},{"size":224,"mtime":1610898783096,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"16vc62k",{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"51"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\reportWebVitals.ts",[],["93","94"],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\App.tsx",["95","96"],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\index.tsx",[],["97","98"],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\Header.tsx",[],["99","100"],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\MainPage.tsx",["101"],"import React, {Component} from \"react\";\r\nimport {Link, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Certificate from \"../entity/Certificate\";\r\nimport Header from \"../components/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport ChipInput from 'material-ui-chip-input'\r\nimport AuthorizationHandleService from \"../services/AuthorizationHandleService\";\r\nimport Pagination from \"../components/Pagination\";\r\nimport LocalStorageHelper from \"../services/LocalStorageHelper\";\r\nimport '../styles/main-page.css'\r\nimport QueryUrlParamHelper from \"../services/QueryUrlParamHelper\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ninterface IProps extends RouteComponentProps<any> {\r\n}\r\n\r\ninterface IState {\r\n    items: Certificate[];\r\n\r\n    tagNames: string[];\r\n    sort?: string;\r\n\r\n    partName: string;\r\n    partDescription: string;\r\n    displayFilters: boolean;\r\n    pageSize: number;\r\n    pageNumber: number;\r\n\r\n    itemCount: number;\r\n    totalPageCount: number;\r\n}\r\n\r\n\r\nclass MainPage extends Component<IProps, IState> {\r\n\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = ({\r\n            items: [],\r\n            displayFilters: false,\r\n            partName: '',\r\n            partDescription: '',\r\n            itemCount: LocalStorageHelper.calcItemCount(),\r\n            pageNumber: 1,\r\n            pageSize: 5,\r\n            totalPageCount: 1000,\r\n            tagNames: [],\r\n            sort: 'LAST_UPDATE:asc'\r\n        })\r\n        console.log('before build search')\r\n    }\r\n\r\n    private buildSearch(location: string) {\r\n        const query = new URLSearchParams(location);\r\n        let tagNames = query.get('tagNames');\r\n        if (tagNames) {\r\n            this.setState({tagNames: tagNames.split(',')})\r\n        }\r\n        let pageSize = query.get('pageSize');\r\n        if (pageSize) {\r\n            this.setState({pageSize: Number.parseInt(pageSize)})\r\n        }\r\n        let pageNumber = query.get('pageNumber');\r\n        if (pageNumber) {\r\n            this.setState({pageNumber: Number.parseInt(pageNumber)})\r\n        }\r\n        let partName = query.get('partName');\r\n        console.log('partName in buildSearch = ' + partName)\r\n        if (partName) {\r\n            this.setState({partName: partName})\r\n        }\r\n        let partDescription = query.get('partDescription');\r\n        if (partDescription) {\r\n            this.setState({partDescription: partDescription})\r\n        }\r\n        let sort = query.get('sort');\r\n        if (sort) {\r\n            this.setState({sort: sort})\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadResources(this.props.location.search);\r\n        this.buildSearch(this.props.location.search);\r\n    }\r\n\r\n\r\n    private loadResources(location: string) {\r\n        const endpoint = \"http://localhost:8080/certificates\" + location;\r\n        console.log(\"loadResources, location = \" + location);\r\n\r\n        axios.get(endpoint).then(res => {\r\n            let data = res.data.items;\r\n            let totalPageCount = res.data.totalPageCount;\r\n            console.log(\"data = \" + data)\r\n            console.log(\"totalPageCount = \" + totalPageCount)\r\n            let list: Certificate[] = Certificate.parseCertificateList(data);\r\n            this.setState({items: list, totalPageCount: totalPageCount});\r\n        }).catch((error) => {\r\n            console.log(\"error = \" + error);\r\n            AuthorizationHandleService.handleTokenExpired(\r\n                error,\r\n                () => this.loadResources(location),\r\n                () => window.location.reload()\r\n            )\r\n        });\r\n    }\r\n\r\n    handleAddTag = (chip) => {\r\n        this.setState(prev => ({\r\n            tagNames: [...prev.tagNames, chip]\r\n        }));\r\n    }\r\n    handleDeleteTag = (chip) => {\r\n        this.setState({\r\n            tagNames: this.state.tagNames.filter((e) => e !== chip)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <Header cartItems={this.state.itemCount}/>\r\n                <div className={'container my-3 pt-5 text-center'}>\r\n                    {\r\n                        this.state.displayFilters ?\r\n                            <button className={'btn btn-primary'} onClick={() => this.toggleFilter()}>Hide\r\n                                filters</button>\r\n                            :\r\n                            <button className={'btn btn-primary'} onClick={() => this.toggleFilter()}>Show\r\n                                Filters</button>\r\n                    }\r\n                </div>\r\n                {\r\n                    this.state.displayFilters &&\r\n                    <div className={'d-flex justify-content-center'}>\r\n                        <div className={'form__container mx-5 mb-5 w-50 text-center'}>\r\n                            <div className={'row text-center'}>\r\n                                <div className=\"form-group col-6\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter name\" id=\"partName\"\r\n                                           value={this.state.partName}\r\n                                           onChange={event => this.setState({partName: event.target.value})}/>\r\n                                </div>\r\n                                <div className=\"form-group col-6\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter description\"\r\n                                           id=\"partDescription\" value={this.state.partDescription}\r\n                                           onChange={event => this.setState({partDescription: event.target.value})}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group text-center row\">\r\n                                <div className={'col-6 text-left chip__array'}>\r\n                                    <ChipInput\r\n                                        label={'Tags'}\r\n                                        value={this.state.tagNames}\r\n                                        onAdd={chip => this.handleAddTag(chip)}\r\n                                        onDelete={chip => this.handleDeleteTag(chip)}/>\r\n                                </div>\r\n                                <div className={'col-6 text-center'}>\r\n                                    <div className={'radio text-left'}>\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"radio\" name=\"sort\"\r\n                                                   id=\"exampleRadios1\" value=\"LAST_UPDATE:asc\"\r\n                                                   checked={this.state.sort === 'LAST_UPDATE:asc'}\r\n                                                   onChange={() => this.setState({sort: 'LAST_UPDATE:asc'})}/>\r\n                                            <label className=\"form-check-label\" htmlFor=\"exampleRadios1\">\r\n                                                Sort by last update\r\n                                            </label>\r\n                                        </div>\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"radio\" name=\"sort\"\r\n                                                   id=\"exampleRadios2\" value=\"NAME:asc\"\r\n                                                   checked={this.state.sort === 'NAME:asc'}\r\n                                                   onChange={() => this.setState({sort: 'NAME:asc'})}/>\r\n                                            <label className=\"form-check-label\" htmlFor=\"exampleRadios2\">\r\n                                                Sort by name\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <button onClick={() => this.filter()} className=\"btn btn-primary\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <main className={'main-page'}>\r\n                    <div className=\"coupon_list\">\r\n                        {\r\n                            this.state.items && this.state.items.map((el, i) => (\r\n                                <div key={i} className=\"card mx-2 my-4\">\r\n                                    <h2 className=\"card-title card-header text-center\">\r\n                                        {el.name}\r\n                                    </h2>\r\n\r\n                                    <div className=\"card-body-header p-3\">\r\n                                        <p className=\"card-text\">\r\n                                            {el.description.substr(0, 100)}\r\n                                        </p>\r\n                                    </div>\r\n                                    <ul className=\"list-group list-group-flush\">\r\n                                        <li className=\"list-group-item\">\r\n                                            <span>Expires in 4 days</span>\r\n                                        </li>\r\n                                        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                                            <span>${el.price}</span>\r\n                                            <span>\r\n                                                <button className={'btn btn-secondary'}\r\n                                                        onClick={() => this.addCard(el.id)}>Add to Cart</button>\r\n                                            </span>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <div className=\"card-body text-left\">\r\n                                        {\r\n                                            el.tags.map((value, index) => (\r\n                                                <span key={index} className={'mr-1'}>\r\n                                                    <Link to={'/?tagNames=' + value}\r\n                                                          onClick={() => this.setState({\r\n                                                                  tagNames: [value],\r\n                                                                  partName: '',\r\n                                                                  partDescription: '',\r\n                                                                  sort: 'LAST_UPDATE:asc',\r\n                                                                  pageNumber: 1\r\n                                                              },\r\n                                                              () => this.filter())}>\r\n                                                        #{value}\r\n                                                    </Link>\r\n                                                </span>\r\n                                            ))\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </main>\r\n\r\n                <Pagination pageNumber={this.state.pageNumber} pageSize={this.state.pageSize}\r\n                            totalPageCount={this.state.totalPageCount}\r\n                            onClickPagination={(event, input) => this.onClickPagination(event, input)}\r\n                            changePageSize={(event) => this.changePageSize(event)}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private changePageSize(event: React.ChangeEvent<HTMLSelectElement>) {\r\n        this.setState(() => (({pageNumber: 1, pageSize: Number.parseInt(event.target.value)})),\r\n            () => this.filter());\r\n    }\r\n\r\n    private filter() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        QueryUrlParamHelper.setParamQuery(query, this.state.partName, 'partName');\r\n        QueryUrlParamHelper.setParamQuery(query, this.state.partDescription, 'partDescription');\r\n        QueryUrlParamHelper.setParamQuery(query, this.state.pageNumber, 'pageNumber');\r\n        QueryUrlParamHelper.setParamQuery(query, this.state.pageSize, 'pageSize');\r\n        QueryUrlParamHelper.setParamQuery(query, this.state.sort, 'sort');\r\n        QueryUrlParamHelper.setParamQueryArray(query, this.state.tagNames, 'tagNames');\r\n        let path = \"?\" + query.toString();\r\n        this.props.history.replace(path);\r\n        this.loadResources(path);\r\n        this.buildSearch(path);\r\n    }\r\n\r\n\r\n    private addCard(id: number) {\r\n        LocalStorageHelper.putItemBasket(id);\r\n        this.setState({itemCount: LocalStorageHelper.calcItemCount()})\r\n    }\r\n\r\n    private toggleFilter(): void {\r\n        this.setState(prevState => ({\r\n            displayFilters: !prevState.displayFilters\r\n        }));\r\n    }\r\n\r\n    private onClickPagination(event: React.MouseEvent<HTMLAnchorElement>, input: number) {\r\n        event.preventDefault();\r\n        console.log(\"onclick pagination = \" + input)\r\n        this.setState({pageNumber: input}, () => this.filter());\r\n    }\r\n}\r\n\r\nexport default withRouter(MainPage);","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\LoginPage.tsx",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\RegisterPage.tsx",["102"],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\entity\\Certificate.ts",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\admin\\CertificatesAdminPage.tsx",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\Interceptors.js",[],["103","104"],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\Pagination.tsx",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\AuthorizationHandleService.ts",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\LocalStorageHelper.ts",["105"],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\Footer.tsx",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\user\\BasketPage.tsx",["106"],"import React, {Component} from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport Header from \"../../components/Header\";\r\nimport '../../styles/checkout.css'\r\nimport Certificate from \"../../entity/Certificate\";\r\nimport LocalStorageHelper from \"../../services/LocalStorageHelper\";\r\nimport CouponComp from \"../../components/CouponComp\";\r\nimport axios from \"axios\";\r\nimport AuthorizationHandleService from \"../../services/AuthorizationHandleService\";\r\nimport RefExtractor from \"../../services/RefExtractor\";\r\n\r\n\r\ninterface IProps extends RouteComponentProps<any> {\r\n}\r\n\r\ninterface IState {\r\n    // coupons: Map<number, number>;\r\n    coupons: Map<Certificate, number>;\r\n}\r\n\r\n\r\nclass BasketPage extends Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            coupons: new Map([])\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let basket = Array.from(LocalStorageHelper.getBasket().entries())\r\n        console.log('basket comp did mount = ' + JSON.stringify(basket))\r\n        let resultBasket: Map<Certificate, number> = new Map([]);\r\n        for (let i = 0; i < basket.length; i++) {\r\n            await this.buildItem(resultBasket, basket[i][0], basket[i][1]);\r\n        }\r\n        this.setState({coupons: resultBasket})\r\n        console.log(\"resultBasket = \" + JSON.stringify(Array.from(resultBasket.entries())))\r\n    }\r\n\r\n    async buildItem(resultBasket: Map<Certificate, number>, id: number, size: number) {\r\n        const endpoint = \"http://localhost:8080/certificates/\" + id;\r\n        await axios.get(endpoint).then(res => {\r\n            let data = res.data;\r\n            resultBasket.set(Certificate.parse(data), size)\r\n        }).catch((error) => {\r\n            console.log(\"error = \" + error);\r\n            AuthorizationHandleService.handleTokenExpired(\r\n                error,\r\n                () => this.buildItem(resultBasket, id, size),\r\n                () => window.location.reload()\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <div className={'mt-5 pt-2'}/>\r\n                <div className=\"header_line\">\r\n                    <span>\r\n                        Basket\r\n                    </span>\r\n                </div>\r\n\r\n                <main className={'checkout'}>\r\n                    <div className=\"main_container\">\r\n                        <div className=\"coupons mt-5\">\r\n\r\n                            {\r\n                                this.state.coupons.size === 0 &&\r\n                                <h1 className={'container my-5 py-5'}>\r\n                                    You have not certificates in your basket\r\n                                </h1>\r\n                            }\r\n\r\n                            {\r\n                                Array.from(this.state.coupons.entries()).map((value, index) => (\r\n                                    <CouponComp key={index} certificate={value[0]} size={value[1]}\r\n                                                onMinus={() => this.onMinus(value)}\r\n                                                onPlus={() => this.onPlus(value)}/>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                        <div className=\"line\"/>\r\n                        <div className=\"total_container\">\r\n                            <div className=\"total\">\r\n                                <span>Total</span>\r\n                                <span>${\r\n                                    Array.from(this.state.coupons.entries())\r\n                                        .map(value => value[0].price * value[1])\r\n                                        .reduce((p, c) => p + c, 0)\r\n                                }</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"btn_container\">\r\n                            <div className=\"btn_place\">\r\n                                <button className=\"btn transparent_bg\"\r\n                                        onClick={() => {\r\n                                            this.props.history.push('/');\r\n                                        }}>\r\n                                    Back\r\n                                </button>\r\n                                {\r\n                                    this.state.coupons.size === 0 ?\r\n                                        <button className=\"btn green_bg disabled\">\r\n                                            Save\r\n                                        </button>\r\n                                        :\r\n                                        <button className=\"btn green_bg\" onClick={() => this.onFormSubmit()}>\r\n                                            Save\r\n                                        </button>\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private onMinus(value: [Certificate, number]) {\r\n        LocalStorageHelper.removeItemBasket(value[0].id);\r\n        let copyMap = new Map(this.state.coupons.entries());\r\n        if (value[1] - 1 < 1) {\r\n            copyMap.delete(value[0])\r\n            this.setState({coupons: copyMap});\r\n        } else {\r\n            copyMap.set(value[0], value[1] - 1)\r\n            this.setState({\r\n                coupons: copyMap\r\n            });\r\n        }\r\n    }\r\n\r\n    private onPlus(value: [Certificate, number]) {\r\n        LocalStorageHelper.putItemBasket(value[0].id);\r\n        let copyMap = new Map(this.state.coupons.entries());\r\n        copyMap.set(value[0], value[1] + 1)\r\n        this.setState({\r\n            coupons: copyMap\r\n        })\r\n    }\r\n\r\n    private onFormSubmit() {\r\n        const endpoint = \"http://localhost:8080/orders\";\r\n\r\n\r\n        let retCerts = Array.from(this.state.coupons.entries())\r\n            .map(value => {\r\n                return {\r\n                    id: value[0].id,\r\n                    count: value[1]\r\n                }\r\n            });\r\n        let role = LocalStorageHelper.getRole();\r\n        let data\r\n        if (role === 'ADMIN') {\r\n            data = {\r\n                userId: LocalStorageHelper.getUserId(),\r\n                giftCertificates: retCerts,\r\n            }\r\n        } else if (role === 'USER') {\r\n            data = {\r\n                giftCertificates: retCerts,\r\n            }\r\n        } else {\r\n            this.props.history.push('/login');\r\n            return;\r\n        }\r\n\r\n\r\n        axios.post(endpoint,\r\n            data\r\n        ).then(() => {\r\n            LocalStorageHelper.clearBasket();\r\n            this.props.history.push(\"/orders\");\r\n        }).catch((error) => {\r\n            if (error.response.data.errorCode === '40128') {\r\n                this.props.history.push('/login');\r\n            }\r\n            AuthorizationHandleService.handleTokenExpired(\r\n                error,\r\n                () => this.onFormSubmit(),\r\n                () => window.location.reload()\r\n            )\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(BasketPage);\r\n","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\components\\CouponComp.tsx",["107"],"import React, {Component} from \"react\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\nimport Certificate from \"../entity/Certificate\";\r\n\r\n\r\ninterface IProps {\r\n    certificate: Certificate;\r\n    size: number;\r\n    onMinus: any;\r\n    onPlus: any;\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nexport default class CouponComp extends Component<IProps, IState> {\r\n\r\n\r\n    render() {\r\n\r\n        if (this.props.certificate) {\r\n            return (\r\n                <div className=\"coupon row mb-3\">\r\n                    <div className=\"details col-8\">\r\n                        <div className=\"coupon_name\">{this.props.certificate.name}</div>\r\n                        <div className=\"coupon_description\">{this.props.certificate.description.substr(0, 100)}</div>\r\n                    </div>\r\n                    <div className={'row col-4'}>\r\n                        <div className={'minus__plus d-flex align-items-center mr-5 justify-content-end'}>\r\n                            <button className={'btn btn-outline-secondary'}\r\n                                    onClick={() => this.props.onMinus()}>\r\n                                -\r\n                            </button>\r\n                            <span className={'mx-2'}>{this.props.size}</span>\r\n                            <button className={'btn btn-outline-secondary'}\r\n                                    onClick={() => this.props.onPlus()}>\r\n                                +\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-end align-items-center\">\r\n                            <div className=\"price\">${this.props.certificate.price * this.props.size}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"coupon\">\r\n                    <div className=\"details\">\r\n                        <div className=\"coupon_name\"/>\r\n                        <div className=\"coupon_description\"/>\r\n                        <div className={'minus__plus d-flex align-items-center mr-5'}>\r\n                            <button className={'btn btn-outline-secondary'}>-</button>\r\n                            <span className={'mx-2'}>{this.props.size}</span>\r\n                            <button className={'btn btn-outline-secondary'}>+</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end align-items-center\">\r\n                        <div className=\"price\"/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n}","D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\RefExtractor.tsx",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\pages\\user\\UserOrdersPage.tsx",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\entity\\Order.ts",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\entity\\Purchase.ts",[],"D:\\Programming\\epam-java-learning\\java-mjc-school\\front-end-react\\src\\services\\Parser.ts",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":8,"column":8,"nodeType":"114","messageId":"115","endLine":8,"endColumn":14},{"ruleId":"112","severity":1,"message":"116","line":9,"column":8,"nodeType":"114","messageId":"115","endLine":9,"endColumn":16},{"ruleId":"108","replacedBy":"117"},{"ruleId":"110","replacedBy":"118"},{"ruleId":"108","replacedBy":"119"},{"ruleId":"110","replacedBy":"120"},{"ruleId":"112","severity":1,"message":"121","line":13,"column":9,"nodeType":"114","messageId":"115","endLine":13,"endColumn":17},{"ruleId":"112","severity":1,"message":"122","line":1,"column":27,"nodeType":"114","messageId":"115","endLine":1,"endColumn":36},{"ruleId":"108","replacedBy":"123"},{"ruleId":"110","replacedBy":"124"},{"ruleId":"112","severity":1,"message":"125","line":3,"column":13,"nodeType":"114","messageId":"115","endLine":3,"endColumn":19},{"ruleId":"112","severity":1,"message":"126","line":10,"column":8,"nodeType":"114","messageId":"115","endLine":10,"endColumn":20},{"ruleId":"112","severity":1,"message":"127","line":2,"column":9,"nodeType":"114","messageId":"115","endLine":2,"endColumn":28},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"@typescript-eslint/no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'CartPage' is defined but never used.",["128"],["129"],["128"],["129"],"'Redirect' is defined but never used.","'RefObject' is defined but never used.",["128"],["129"],"'basket' is assigned a value but never used.","'RefExtractor' is defined but never used.","'RouteComponentProps' is defined but never used.","no-global-assign","no-unsafe-negation"]